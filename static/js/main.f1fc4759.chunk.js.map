{"version":3,"sources":["Content/icons/bar-chart-outline.svg","Content/images/algo.jpg","Content/icons/infinite-outline.svg","Content/icons/hourglass-outline.svg","Content/icons/reader-outline.svg","Content/images/dijikstra.jpg","Content/images/bar-small.jpg","Content/Home.js","Content/Bubble.js","Content/Insertion.js","Content/Selection.js","Content/InPlaceMerge.js","Content/Quick.js","Content/Heap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","href","class","src","bar_outline","alt","id","sizes","require","algo","infinite_outline","hourglass","reader","style","padding","Component","WIN_WIDTH","window","innerWidth","WIN_HEIGHT","innerHeight","MAX_ARRAY_SIZE","Math","floor","BAR_WIDTH","TEXT_SIZE","array_size","speed","openCity","event","cityName","i","tabcontent","tablinks","document","getElementsByClassName","length","display","replace","getElementById","tag","classname","click","Bubble","props","state","array","size","handleChange","bind","handleSpeedChange","this","resetArray","setState","target","value","text","setArraySize","arrayBars","k","backgroundColor","setText","innerHTML","min","max","push","random","setSpeed","map","idx","key","width","height","fontSize","marginLeft","Form","Row","Control","type","placeholder","onChange","Button","onClick","animations","j","temp","bubbleSort","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","color","setTimeout","console","log","barOneHeight","barTwoHeight","animateBubbleSort","Insertion","InsertionSort","animateInsertionSort","Selection","min_index","SelectionSort","animateSelectionSort","mainSort","mergeSort","start","end","mid","index","merge","isSwapped","Merge","QuickSort","low","high","pi","pivot","partition","Quick","animateQuickSort","heapify","n","largest","l","r","animateHeapSort","t","heapSort","Heap","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1fc4759.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bar-chart-outline.fa3aa102.svg\";","module.exports = __webpack_public_path__ + \"static/media/algo.1ab691bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/infinite-outline.1d4fbe2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/hourglass-outline.d4703ae7.svg\";","module.exports = __webpack_public_path__ + \"static/media/reader-outline.87bbebe9.svg\";","module.exports = __webpack_public_path__ + \"static/media/dijikstra.c0a9e5f3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bar-small.7324d6e8.jpg\";","import React, {Component} from 'react';\r\nimport './CSS/Home.css'\r\n\r\nimport algo from './images/algo.jpg'\r\nimport bar_outline from './icons/bar-chart-outline.svg'\r\nimport infinite_outline from './icons/infinite-outline.svg'\r\nimport hourglass from './icons/hourglass-outline.svg'\r\nimport reader from './icons/reader-outline.svg'\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"medium-12 columns\">\r\n      <main>\r\n      <nav>\r\n\r\n\r\n      <a href=\"/algoviz/\">\r\n      <div class=\"logo\">\r\n      <img src={bar_outline} alt={\"Logo\"}/>\r\n      <h4>AlgoViz</h4>\r\n      </div>\r\n      </a>\r\n\r\n\r\n\r\n      <ul class=\"nav-links\">\r\n      <li >\r\n      <a href=\"/algoviz/\"  class=\"btn-text nav-a\">Home</a>\r\n      </li>\r\n      <li>\r\n      <a href=\"/#section-about\" class=\"btn-text nav-a\">About</a>\r\n      </li><li>\r\n      <a href=\"/#section-tours\" class=\"btn-text nav-a\">Algorithms</a>\r\n      </li>\r\n      </ul>\r\n      </nav>\r\n      <header class=\"header\" id=\"header\">\r\n      <div class=\"header__text-box\">\r\n      <h1 class=\"heading-primary\">\r\n      <span class=\"heading-primary--main\">AlgoViz</span>\r\n      <span class=\"heading-primary--sub\">The best way to understand data structures is to see them in action</span>\r\n      </h1>\r\n\r\n      <a href=\"#section-tours\" class=\"btn btn--white btn--animated dis\">Learn Algorithms</a>\r\n      </div>\r\n      </header>\r\n\r\n\r\n      <section class=\"section-about\" id=\"section-about\">\r\n      <div class=\"u-center-text u-margin-bottom-big \">\r\n      <h2 class=\"heading-secondary\">\r\n      Understand complex data structures\r\n      </h2>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n      <div class=\"col-1-of-2\">\r\n      <h3 class=\"heading-tertiary u-margin-bottom-small\">The best way to understand data structures is to see them in action</h3>\r\n      <p class=\"paragraph\">\r\n      Acquiring knowledge about algorithms is always a difficult and complex process. Every time we had to visulaize\r\n      the pattern in which the algorithm is performing and for complex data structures involving many transitions in a single step. Hence, this will\r\n      make your task easy.\r\n      </p>\r\n\r\n      <h3 class=\"heading-tertiary u-margin-bottom-small\">Easy learning</h3>\r\n      <p class=\"paragraph\">\r\n      It can be made easy after plotting graphically to understand in a better and more convinient way.\r\n      </p>\r\n\r\n\r\n      </div>\r\n      <div class=\"col-1-of-2\">\r\n      <div class=\"composition\">\r\n\r\n      <img\r\n      sizes=\"(max-width: 56.25em) 20vw, (max-width: 37.5em) 30vw, 300px\"\r\n      alt=\"Icon 1\"\r\n      class=\"composition__photo composition__photo--p1\"\r\n      src={require('./images/dijikstra.jpg')} />\r\n\r\n      <img\r\n      sizes=\"(max-width: 56.25em) 20vw, (max-width: 37.5em) 30vw, 300px\"\r\n      alt=\"Icon 3\"\r\n      class=\"composition__photo composition__photo--p3\"\r\n      src={require('./images/bar-small.jpg')} />\r\n\r\n      <img\r\n      sizes=\"(max-width: 56.25em) 20vw, (max-width: 37.5em) 30vw, 300px\"\r\n      alt=\"Icon 2\"\r\n      class=\"composition__photo composition__photo--p2\"\r\n      src={algo} />\r\n\r\n\r\n\r\n\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </section>\r\n\r\n      <section class=\"section-features\">\r\n\r\n      <div class=\"row\">\r\n      <div class=\"col-1-of-4\">\r\n      <div class=\"feature-box\">\r\n      <i class=\"feature-box__icon \"></i>\r\n      <img src={bar_outline} class=\"icn\"  alt={\"Bar-chart\"}/>\r\n      <h3 class=\"heading-tertiary u-margin-bottom-small\" >visualization of algorithms</h3>\r\n      <p class=\"feature-box__text\">\r\n      Visual illustration of an algorithm’s operation, of its performance on different kinds of inputs and better understanding.\r\n      </p>\r\n      </div>\r\n      </div>\r\n\r\n      <div class=\"col-1-of-4\">\r\n      <div class=\"feature-box\">\r\n      <i class=\"feature-box__icon \"></i>\r\n      <img src={infinite_outline} class=\"icn\"  alt={\"Infinity-symbol\"}/>\r\n      <h3 class=\"heading-tertiary u-margin-bottom-small\">Deeper knowledge</h3>\r\n      <p class=\"feature-box__text\">\r\n      How complexity depends on input, the iterations and choosing the best one out of many.\r\n      </p>\r\n      </div>\r\n      </div>\r\n\r\n      <div class=\"col-1-of-4\">\r\n      <div class=\"feature-box\">\r\n      <i class=\"feature-box__icon \"></i>\r\n      <img src={hourglass} class=\"icn\" alt={\"Hourglass\"}/>\r\n      <h3 class=\"heading-tertiary u-margin-bottom-small\">Learn at your own pace</h3>\r\n      <p class=\"feature-box__text\">\r\n      Looking onto each step and comparing the code with the side by side execution. Delay factor to help you to learn accordingly.\r\n      </p>\r\n      </div>\r\n      </div>\r\n\r\n      <div class=\"col-1-of-4\">\r\n      <div class=\"feature-box\">\r\n      <i class=\"feature-box__icon \"></i>\r\n      <img src={reader} class=\"icn\" alt={\"reader\"}/>\r\n      <h3 class=\"heading-tertiary u-margin-bottom-small\">Last minute guide</h3>\r\n      <p class=\"feature-box__text\">\r\n      In a hurry? You are all sorted for the simplest and the important concepts.\r\n      </p>\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </section>\r\n\r\n\r\n      <section class=\"section-tours\" id=\"section-tours\">\r\n      <div class=\"u-center-text u-margin-bottom-big\">\r\n      <h2 class=\"heading-secondary\">\r\n      Sorting Algorithms\r\n      </h2>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n      <div class=\"col-1-of-3\">\r\n      <div class=\"card\">\r\n      <div class=\"card__side card__side--front\">\r\n      <div class=\"card__picture card__picture--1\">\r\n      &nbsp;\r\n      </div>\r\n      <h4 class=\"card__heading\">\r\n      <span class=\"card__heading-span card__heading-span--1\">Bubble Sort</span>\r\n      </h4>\r\n      <div class=\"card__details\">\r\n      <ul>\r\n\r\n\r\n      <li>Time complexity : O(n^2)</li>\r\n      <li>Space complexity : O(1)</li>\r\n      <li>Difficulty: easy - medium</li>\r\n      <li> <a href=\"/algoviz/bubble-sort\"  class=\"btn-explore\">Explore</a> </li>\r\n      </ul>\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n\r\n\r\n      <div class=\"col-1-of-3\">\r\n      <div class=\"card\">\r\n      <div class=\"card__side card__side--front\">\r\n      <div class=\"card__picture card__picture--2\">\r\n      &nbsp;\r\n      </div>\r\n      <h4 class=\"card__heading\">\r\n      <span class=\"card__heading-span card__heading-span--2\">Insertion Sort</span>\r\n      </h4>\r\n      <div class=\"card__details\">\r\n      <ul>\r\n\r\n      <li>Time complexity : O(n^2)</li>\r\n      <li>Space complexity : O(1)</li>\r\n      <li>Difficulty: hard </li>\r\n      <li> <a href=\"/algoviz/insertion-sort\"  class=\"btn-explore\">Explore</a> </li>\r\n      </ul>\r\n      </div>\r\n\r\n      </div>\r\n      </div>\r\n      </div>\r\n\r\n\r\n      <div class=\"col-1-of-3\">\r\n      <div class=\"card\">\r\n      <div class=\"card__side card__side--front\">\r\n      <div class=\"card__picture card__picture--3\">\r\n      &nbsp;\r\n      </div>\r\n      <h4 class=\"card__heading\">\r\n      <span class=\"card__heading-span card__heading-span--3\">Selection Sort</span>\r\n      </h4>\r\n      <div class=\"card__details\">\r\n      <ul>\r\n      <li>Time complexity : O(n^2)</li>\r\n      <li>Space complexity : O(1)</li>\r\n      <li>Difficulty: easy - medium</li>\r\n      <li> <a href=\"/algoviz/selection-sort\"  class=\"btn-explore\">Explore</a> </li>\r\n      </ul>\r\n      </div>\r\n\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n\r\n      <div style={{padding: '3rem',}}>\r\n\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n      <div class=\"col-1-of-3\">\r\n      <div class=\"card\">\r\n      <div class=\"card__side card__side--front\">\r\n      <div class=\"card__picture card__picture--1 crdpic4\">\r\n      &nbsp;\r\n      </div>\r\n      <h4 class=\"card__heading\">\r\n      <span class=\"card__heading-span card__heading-span--1\"> In-Place Merge Sort</span>\r\n      </h4>\r\n      <div class=\"card__details\">\r\n      <ul>\r\n      <li>Time complexity : O(nlogn)</li>\r\n      <li>Space complexity : O(n)</li>\r\n      <li>Difficulty: easy - medium</li>\r\n      <li> <a href=\"/algoviz/inplace-merge-sort\"  class=\"btn-explore\">Explore</a> </li>\r\n      </ul>\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n\r\n\r\n      <div class=\"col-1-of-3\">\r\n      <div class=\"card\">\r\n      <div class=\"card__side card__side--front\">\r\n      <div class=\"card__picture card__picture--2 crdpic5\">\r\n      &nbsp;\r\n      </div>\r\n      <h4 class=\"card__heading\">\r\n      <span class=\"card__heading-span card__heading-span--2\">Quick Sort</span>\r\n      </h4>\r\n      <div class=\"card__details\">\r\n      <ul>\r\n      <li>Time complexity : O(nlogn)</li>\r\n      <li>Space complexity : O(logn)</li>\r\n      <li>Difficulty: hard </li>\r\n      <li> <a href=\"/algoviz/quick-sort\"  class=\"btn-explore\">Explore</a> </li>\r\n      </ul>\r\n      </div>\r\n\r\n      </div>\r\n      </div>\r\n      </div>\r\n\r\n\r\n      <div class=\"col-1-of-3\">\r\n      <div class=\"card\">\r\n      <div class=\"card__side card__side--front\">\r\n      <div class=\"card__picture card__picture--3 crdpic6\">\r\n      &nbsp;\r\n      </div>\r\n      <h4 class=\"card__heading\">\r\n      <span class=\"card__heading-span card__heading-span--3\">Heap Sort</span>\r\n      </h4>\r\n      <div class=\"card__details\">\r\n      <ul>\r\n      <li>Time complexity : O(nlogn)</li>\r\n      <li>Space complexity : O(1)</li>\r\n      <li>Difficulty: easy - medium</li>\r\n      <li> <a href=\"/algoviz/heap-sort\"  class=\"btn-explore\">Explore</a> </li>\r\n      </ul>\r\n      </div>\r\n\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n\r\n      <div class=\"u-center-text u-margin-top-huge\">\r\n\r\n      </div>\r\n      </section>\r\n\r\n      </main>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React, {Component} from 'react';\r\nimport './CSS/bubble.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport bar_outline from './icons/bar-chart-outline.svg';\r\n\r\nconst PRIMARY_COLOR = '#3244a8';\r\nconst SECONDARY_COLOR = '#d40f0f';\r\nconst WIN_WIDTH = (window.innerWidth) /1.6;\r\nconst WIN_HEIGHT = (window.innerHeight) / 1.7;\r\nconst MIN_ARRAY_SIZE = 8;\r\nconst MAX_ARRAY_SIZE = Math.floor(WIN_WIDTH/5);\r\nvar BAR_WIDTH = Math.floor(WIN_WIDTH / MIN_ARRAY_SIZE);\r\nvar TEXT_SIZE = (BAR_WIDTH)/2;\r\nconst MIN_SPEED = 5;\r\nvar array_size = 8;\r\nvar speed = 10;\r\n\r\n/* Sorting Algorithm Fucntions*/\r\n\r\nfunction bubbleSort(array){\r\n\r\n  const animations = [];\r\n\r\n  for(let i=0;i<array.length-1;i++){\r\n    for(let j=0;j<array.length-i-1;j++){\r\n\r\n      animations.push([j,j+1]);\r\n\r\n      if(array[j] > array[j+1]){\r\n        const temp = array[j];\r\n        array[j] = array[j+1];\r\n        array[j+1] = temp;\r\n        animations.push([array[j] , array[j+1]]);\r\n      }else{\r\n        animations.push([array[j] , array[j+1]]);\r\n      }\r\n\r\n      animations.push([j,j+1]);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\n  //Function to animate the bar representing an array\r\n\r\nexport function animateBubbleSort(array, speed){\r\n\r\n  const animations = bubbleSort(array);\r\n  const arrayBars = document.getElementsByClassName('array-bar');\r\n  for(let i=0;i<animations.length;i++){\r\n    const isChange = i%3 !== 1;\r\n    if(isChange){\r\n      const [barOneIndex, barTwoIndex] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIndex].style;\r\n      const barTwoStyle = arrayBars[barTwoIndex].style;\r\n      const color = i%3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n      setTimeout(() => {\r\n        console.log(color);\r\n        barOneStyle.backgroundColor = color;\r\n        barTwoStyle.backgroundColor = color;\r\n      }, i * speed);\r\n    }else{\r\n      const [barOneIndex, barTwoIndex] = animations[i-1];\r\n      const barOneStyle = arrayBars[barOneIndex].style;\r\n      const barTwoStyle = arrayBars[barTwoIndex].style;\r\n      const [barOneHeight, barTwoHeight] = animations[i];\r\n      setTimeout(() => {\r\n        const text = document.getElementsByClassName('bar-value');\r\n        text[barOneIndex].innerHTML = barOneHeight;\r\n        text[barTwoIndex].innerHTML = barTwoHeight\r\n        barOneStyle.height = `${barOneHeight}px`;\r\n        barTwoStyle.height = `${barTwoHeight}px`;\r\n      },i*speed);\r\n    }\r\n  }\r\n}\r\n\r\n/*Drawer function for displaying code*/\r\n\r\nfunction openCity(event, cityName){\r\n  // Declare all variables\r\n  var i, tabcontent, tablinks;\r\n  // Get all elements with class=\"tabcontent\" and hide them\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n\r\n  // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n\r\n  // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n  document.getElementById(cityName).style.display = \"block\";\r\n  // evt.currentTarget.className += \" active\";\r\n  let tag = document.getElementById(cityName);\r\n  event.classname += \" active\";\r\n  tag.click();\r\n}\r\n\r\n\r\n// for(let k=0; k<2; k++){\r\n//   const arrayBars = document.getElementsByClassName('array-bar');\r\n//   const barOneStyle = arrayBars[j].style;\r\n//   const barTwoStyle = arrayBars[j+1].style;\r\n//   if(k === 0)\r\n//   {\r\n//     setTimeout(() => {\r\n//       barOneStyle.backgroundColor = 'red';\r\n//       barTwoStyle.backgroundColor = 'red';\r\n//       barOneStyle.height = `${array[j]}px`;\r\n//       barTwoStyle.height = `${array[j+1]}px`;\r\n//     },i*1000);\r\n//   }\r\n//   else{\r\n//     setTimeout(() => {\r\n//       barOneStyle.backgroundColor = '#34eb77';\r\n//       barTwoStyle.backgroundColor = '#34eb77';\r\n//     },i*1000);\r\n//   }\r\n\r\n// setTimeout(() => {\r\n//   barOneStyle.backgroundColor = 'black';\r\n// },j*1000)\r\n\r\n\r\n// Main class to render the entire webpage\r\n\r\nclass Bubble extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state= {\r\n      array: [],\r\n      size: '',\r\n      speed: '',\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.resetArray();\r\n    document.getElementById(\"defaultOpen\").click();\r\n\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({size: event.target.value});\r\n  }\r\n\r\n  handleSpeedChange(event){\r\n    this.setState({speed: event.target.value});\r\n  }\r\n\r\n  setArraySize(){\r\n    if(this.state.size !== '' && this.state.size >= 8){\r\n      if(this.state.size > MAX_ARRAY_SIZE){\r\n        array_size = MAX_ARRAY_SIZE;\r\n      }\r\n      else {\r\n        array_size = this.state.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  setSpeed(){\r\n    if(this.state.speed !== '' && this.state.speed >= 5){\r\n      if(this.state.speed < 5){\r\n        speed = MIN_SPEED;\r\n      }\r\n      else {\r\n        speed = this.state.speed;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  resetArray(){\r\n    this.setArraySize();\r\n    var text;\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for(let k=0;k<this.state.array.length;k++){\r\n      arrayBars[k].style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    var setText = document.getElementById('info-text');\r\n    if(array_size === MAX_ARRAY_SIZE){\r\n      text = \"Array of size \" + array_size + \", i.e. maximum number of arrays, is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }else{\r\n      text = \"Array of size \" + array_size + \" is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }\r\n\r\n    setText.innerHTML = text;\r\n    BAR_WIDTH = WIN_WIDTH / array_size;\r\n    TEXT_SIZE = BAR_WIDTH/2;\r\n    const array = [];\r\n    for(let i=0;i<array_size;i++){\r\n      array.push(randomIntFromInterval(5,WIN_HEIGHT));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {array} = this.state;\r\n    this.setSpeed();\r\n    return (\r\n      <div className =\"main\">\r\n        <div class=\"navi-bar\">\r\n          <nav>\r\n          <a href=\"/algoviz/\">\r\n            <div class=\"logo\">\r\n            <img src={bar_outline} alt={\"Logo\"}/>\r\n            <h4>AlgoViz</h4>\r\n            </div>\r\n          </a>\r\n          <ul class=\"nav-links\">\r\n            <li >\r\n            <a href=\"/algoviz/\"  class=\"btn-text nav-a\">Home</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/bubble-sort/#About\" class=\"btn-text nav-a\">About</a>\r\n            </li><li>\r\n            <a href=\"/algoviz/bubble-sort/#visualizer\" class=\"btn-text nav-a\">Visualizer</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/bubble-sort/#Code\" class=\"btn-text nav-a\">Code</a>\r\n            </li>\r\n          </ul>\r\n          </nav>\r\n        </div>\r\n        <div class=\"banner-bubble\">\r\n        \t<div >\r\n        \t\t<h1 class=\"heading\">BUBBLE SORT</h1>\r\n        \t</div>\r\n        </div>\r\n        <section id=\"About\">\r\n        <div class=\"algo\">\r\n        \t<h2 class=\"algo-heading\">ABOUT</h2>\r\n        \t<p class=\"content\">Bubble sort is considered the simplest sorting algorithm. It goes through an entire array and compares each neighboring number. It then swaps the numbers and keeps doing this until the list is in ascending order.</p>\r\n        \t<div class=\"algo-card\">\r\n                <div class=\"algo-header\">\r\n                  <p class=\"algo-title\">ALGORITHM</p>\r\n                </div>\r\n                <div class=\"card-body algo-body \">\r\n                  <p>We assume list is an array of n elements. We further assume that swap function swaps the values of the given array elements.</p>\r\n                  <br />\r\n                  <p>&nbsp;&nbsp;begin BubbleSort(list)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;for all elements of list</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if list[i] greater than list[i+1]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap(list[i], list[i+1])</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;end for loop</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;return list</p>\r\n                  <p>&nbsp;&nbsp;end BubbleSort</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"complexity\">\r\n              <div class=\"card-group\">\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 class=\"complex-heading\">TIME COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <h3><strong>Best Case</strong></h3>\r\n                              <p> O( n )</p>\r\n                              <h3><strong>Worst Case</strong></h3>\r\n                              <p>O( n<sup>2</sup> )</p>\r\n                              <h3><strong>Average Case</strong></h3>\r\n                              <p>O( n<sup>2</sup> )</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3>SPACE COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <p>Single additional memory space is required for swapping</p>\r\n                              <p>O(1)</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 >NUMBER OF COMPARISONS</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <h3><strong>Best Case</strong></h3>\r\n                              <p>n comparisons</p>\r\n                              <p>Bubble sort will terminate after the first iteration, since no swaps were made.</p>\r\n                              <h3><strong>Worst and Average Case</strong></h3>\r\n                              <p>(n - 1) + (n - 2)...(2) + (1) = n(n - 1)/2 or O(n*n).</p>\r\n                              <p>There will be one less comaprison after every iteration</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        </section>\r\n        <div class=\"visualizer\" id=\"visualizer\">\r\n          <div class=\"visualizer-title\">\r\n            <p><strong>VISUALIZER</strong></p>\r\n          </div>\r\n          {array.map((value, idx) => (\r\n            <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              width: `${BAR_WIDTH}px`,\r\n              height: `${value}px`,\r\n            }}><p className=\"bar-value\" style={{fontSize: `${TEXT_SIZE}px`, }}>{value}</p>\r\n            </div>\r\n          ))}\r\n          <div className=\"info\">\r\n            <p id=\"info-text\"></p>\r\n          </div>\r\n          <div className=\"all-buttons\" style={{marginLeft: `${WIN_WIDTH/3}px`}}>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Array size\" id=\"array-size\" onChange={this.handleChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => this.resetArray()}><strong>Generate New Array</strong></Button>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Time delay (ms)\" id=\"trans-speed\" onChange={this.handleSpeedChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => animateBubbleSort(array, speed)}>Bubble Sort</Button>\r\n              </Form.Row>\r\n            </Form>\r\n          </div>\r\n\r\n        </div>\r\n        <section id=\"Code\">\r\n        <div class=\"code\">\r\n        \t<div class=\"tab\">\r\n          \t\t<button className=\"tablinks\" id=\"defaultOpen\" onClick={() => openCity(this,'cpp')}>C++</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'java')}>JAVA</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'python')}>PYTHON</button>\r\n         \t\t  <button className=\"tablinks\" onClick={() => openCity(this,'js')}>JAVASCRIPT</button>\r\n        \t</div>\r\n\r\n        <div id=\"cpp\" className=\"tabcontent\">\r\n        <br/>\r\n         \t  <p>&nbsp;&nbsp;{\"void bubbleSort(int arr[], int n) \"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int i, j; \"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (i = 0; i < n-1; i++)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (j = 0; j < n-i-1; j++)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (arr[j] > arr[j+1])\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = arr[j];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"arr[j]=arr[j+1];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"arr[j+1]=temp;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        \t  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        \t  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        </div>\r\n\r\n        <div id=\"java\" className=\"tabcontent\">\r\n        <br />\r\n        \t<p>&nbsp;&nbsp;{\"void bubbleSort(int arr[])\"}</p>\r\n        \t<p>&nbsp;&nbsp;{\"{\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int n = arr.length;\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i = 0; i < n-1; i++)\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int j = 0; j < n-i-1; j++)\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (arr[j] > arr[j+1])\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = arr[j];\"} </p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"arr[j] = arr[j+1];\"} </p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"arr[j+1] = temp;\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"} </p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        \t<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        \t<p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n\r\n        <div id=\"python\" className=\"tabcontent\">\r\n          <br />\r\n          <p>&nbsp;&nbsp;{\"def bubbleSort(arr):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"n = len(arr)\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for i in range(n):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for j in range(0, n-i-1):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if arr[j] > arr[j+1] :\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"arr[j], arr[j+1] = arr[j+1], arr[j]\"}</p>\r\n        </div>\r\n        <div id=\"js\" className=\"tabcontent\">\r\n          <p>&nbsp;&nbsp;{\"function bubble_Sort(arr)\"}</p>\r\n          <p>&nbsp;&nbsp;{\"{\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"var len = arr.length,\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i, j, stop;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (i=0; i < len; i++){\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (j=0, stop=len-i; j < stop; j++){\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (arr[j] > arr[j+1]){\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"var temp = arr[j];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"arr[j] = arr[j+1];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"arr[j+1] = temp;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return arr;\"}</p>\r\n          <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n        </div>\r\n        </section>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//RNG Function\r\n\r\nfunction randomIntFromInterval(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Bubble;\r\n","import React, {Component} from 'react';\r\nimport './CSS/insertion.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport bar_outline from './icons/bar-chart-outline.svg'\r\n\r\nconst PRIMARY_COLOR = '#3244a8';\r\nconst SECONDARY_COLOR = '#d40f0f';\r\nconst WIN_WIDTH = (window.innerWidth) /1.6;\r\nconst WIN_HEIGHT = (window.innerHeight) / 1.7;\r\nconst MIN_ARRAY_SIZE = 8;\r\nconst MAX_ARRAY_SIZE = Math.floor(WIN_WIDTH/5);\r\nvar BAR_WIDTH = Math.floor(WIN_WIDTH / MIN_ARRAY_SIZE);\r\nvar TEXT_SIZE = (BAR_WIDTH)/2;\r\nconst MIN_SPEED = 5;\r\nvar array_size = 8;\r\nvar speed = 10;\r\n\r\n/* Sorting Algorithm Fucntions*/\r\n\r\nfunction InsertionSort(array){\r\n\r\n  const animations = [];\r\n\r\n  for(let i=1;i<array.length;){\r\n    var key = array[i];\r\n    var j = i-1;\r\n    while(j>=0 && array[j] > key)\r\n    {\r\n        animations.push([j,j+1]);\r\n        array[j+1] = array[j];\r\n        animations.push([array[j], array[j]]);\r\n        animations.push([j,j+1]);\r\n        j=j-1;\r\n    }\r\n    animations.push([j+1,j+1]);\r\n    array[j+1] = key\r\n    if(i === j+1){\r\n      animations.push([key,key, array[++i]]);\r\n    }else {\r\n      animations.push([key,key, array[++i]]);\r\n    }\r\n    animations.push([j+1,j+1]);\r\n  }\r\n      return animations;\r\n}\r\n\r\n  //Function to animate the bar representing an array\r\n\r\n  export function animateInsertionSort(array,speed){\r\n    const animations = InsertionSort(array);\r\n    for(let i=0;i<animations.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isChange = i%3 !== 1;\r\n      if(isChange){\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        const color = i%3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * speed);\r\n      }else{\r\n          const [barOneIndex, barTwoIndex] = animations[i-1];\r\n          const barOneStyle = arrayBars[barOneIndex].style;\r\n          const barTwoStyle = arrayBars[barTwoIndex].style;\r\n          const [barOneHeight, barTwoHeight] = animations[i];\r\n          setTimeout(() => {\r\n\r\n          const text = document.getElementsByClassName('bar-value');\r\n          text[barOneIndex].innerHTML = barOneHeight;\r\n          text[barTwoIndex].innerHTML = barTwoHeight;\r\n          barOneStyle.height = `${barOneHeight}px`;\r\n          barTwoStyle.height = `${barTwoHeight}px`;\r\n        },i*speed);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n/*Drawer function for displaying code*/\r\n\r\nfunction openCity(event, cityName){\r\n  // Declare all variables\r\n  var i, tabcontent, tablinks;\r\n  // Get all elements with class=\"tabcontent\" and hide them\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n\r\n  // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n\r\n  // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n  document.getElementById(cityName).style.display = \"block\";\r\n  // evt.currentTarget.className += \" active\";\r\n  let tag = document.getElementById(cityName);\r\n  event.classname += \" active\";\r\n  tag.click();\r\n}\r\n\r\n\r\n\r\n// Main class to render the entire webpage\r\n\r\nclass Insertion extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state= {\r\n      array: [],\r\n      size: '',\r\n      speed: '',\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.resetArray();\r\n    document.getElementById(\"defaultOpen\").click();\r\n\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({size: event.target.value});\r\n  }\r\n\r\n  handleSpeedChange(event){\r\n    this.setState({speed: event.target.value});\r\n  }\r\n\r\n  setArraySize(){\r\n    if(this.state.size !== '' && this.state.size >= 8){\r\n      if(this.state.size > MAX_ARRAY_SIZE){\r\n        array_size = MAX_ARRAY_SIZE;\r\n      }\r\n      else {\r\n        array_size = this.state.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  setSpeed(){\r\n    if(this.state.speed !== '' && this.state.speed >= 5){\r\n      if(this.state.speed < 5){\r\n        speed = MIN_SPEED;\r\n      }\r\n      else {\r\n        speed = this.state.speed;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  resetArray(){\r\n    this.setArraySize();\r\n    var text;\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for(let k=0;k<this.state.array.length;k++){\r\n      arrayBars[k].style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    var setText = document.getElementById('info-text');\r\n    if(array_size === MAX_ARRAY_SIZE){\r\n      text = \"Array of size \" + array_size + \", i.e. maximum number of arrays, is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }else{\r\n      text = \"Array of size \" + array_size + \" is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }\r\n\r\n    setText.innerHTML = text;\r\n    BAR_WIDTH = WIN_WIDTH / array_size;\r\n    TEXT_SIZE = BAR_WIDTH/2;\r\n    const array = [];\r\n    for(let i=0;i<array_size;i++){\r\n      array.push(randomIntFromInterval(5,WIN_HEIGHT));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {array} = this.state;\r\n    this.setSpeed();\r\n    return (\r\n      <div className =\"main\">\r\n        <div class=\"navi-bar\">\r\n          <nav>\r\n          <a href=\"/algoviz/\">\r\n            <div class=\"logo\">\r\n            <img src={bar_outline} alt={\"Logo\"}/>\r\n            <h4>AlgoViz</h4>\r\n            </div>\r\n          </a>\r\n          <ul class=\"nav-links\">\r\n            <li >\r\n            <a href=\"/algoviz/\"  class=\"btn-text nav-a\">Home</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/insertion-sort/#About\" class=\"btn-text nav-a\">About</a>\r\n            </li><li>\r\n            <a href=\"/algoviz/insertion-sort/#visualizer\" class=\"btn-text nav-a\">Visualizer</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/insertion-sort/#Code\" class=\"btn-text nav-a\">Code</a>\r\n            </li>\r\n          </ul>\r\n          </nav>\r\n        </div>\r\n        <div class=\"banner-insertion\">\r\n        \t<div >\r\n        \t\t<h1 class=\"heading\">INSERTION SORT</h1>\r\n        \t</div>\r\n        </div>\r\n        <section id=\"About\">\r\n        <div class=\"algo\">\r\n        \t<h2 class=\"algo-heading\">ABOUT</h2>\r\n        \t<p class=\"content\">Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.</p>\r\n        \t<div class=\"algo-card\">\r\n                <div class=\"algo-header\">\r\n                  <p class=\"algo-title\">ALGORITHM</p>\r\n                </div>\r\n                <div class=\"card-body algo-body \">\r\n                  <p>&nbsp;&nbsp;begin insertionSort( A : array of items )</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;int holePosition</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;int valueToInsert</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;for i = 1 to length(A) inclusive do:</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valueToInsert = A[i]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;holePosition = i</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while holePosition > 0 and A[holePosition-1] > valueToInsert do:\"}</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[holePosition] = A[holePosition-1]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;holePosition = holePosition -1</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end while</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[holePosition] = valueToInsert</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;end for loop</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;return A</p>\r\n                  <p>&nbsp;&nbsp;end insertionSort</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"complexity\">\r\n              <div class=\"card-group\">\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 class=\"complex-heading\">TIME COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <h3><strong>Best Case</strong></h3>\r\n                              <p> O( n )</p>\r\n                              <h3><strong>Worst Case</strong></h3>\r\n                              <p>O( n<sup>2</sup> )</p>\r\n                              <h3><strong>Average Case</strong></h3>\r\n                              <p>O( n<sup>2</sup> )</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3>SPACE COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <p>Single additional memory space is required for swapping</p>\r\n                              <p>O(1)</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 >NUMBER OF COMPARISONS</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                          <h3><strong>Best Case</strong></h3>\r\n                          <p>n ( number of items )</p>\r\n                          <h3><strong>Worst Case</strong></h3>\r\n                          <p> n<sup>2</sup> </p>\r\n                          <h3><strong>Average Case</strong></h3>\r\n                          <p> n<sup>2</sup> </p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        </section>\r\n        <div class=\"visualizer\" id=\"visualizer\">\r\n          <div class=\"visualizer-title\">\r\n          <p><strong>VISUALIZER</strong></p>\r\n          </div>\r\n          {array.map((value, idx) => (\r\n            <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              width: `${BAR_WIDTH}px`,\r\n              height: `${value}px`,\r\n            }}><p className=\"bar-value\" style={{fontSize: `${TEXT_SIZE}px`, }}>{value}</p>\r\n            </div>\r\n          ))}\r\n          <div className=\"info\">\r\n            <p id=\"info-text\"></p>\r\n          </div>\r\n          <div className=\"all-buttons\" style={{marginLeft: `${WIN_WIDTH/3}px`}}>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Array size\" id=\"array-size\" onChange={this.handleChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => this.resetArray()}><strong>Generate New Array</strong></Button>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Time delay (ms)\" id=\"trans-speed\" onChange={this.handleSpeedChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => animateInsertionSort(array, speed)}>Insertion Sort</Button>\r\n              </Form.Row>\r\n            </Form>\r\n          </div>\r\n\r\n        </div>\r\n        <section id=\"Code\">\r\n        <div class=\"code\">\r\n        \t<div class=\"tab\">\r\n          \t\t<button className=\"tablinks\" id=\"defaultOpen\" onClick={() => openCity(this,'cpp')}>C++</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'java')}>JAVA</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'python')}>PYTHON</button>\r\n         \t\t  <button className=\"tablinks\" onClick={() => openCity(this,'js')}>JAVASCRIPT</button>\r\n        \t</div>\r\n\r\n        <div id=\"cpp\" className=\"tabcontent\">\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"void insertionSort(int array[], int n)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i=1; i<n; i++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int key = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int j = i-1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(j >=0 && array[j] > key)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j=j-1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = key;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n\r\n        <div id=\"java\" className=\"tabcontent\">\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"public void insertionSort(int array[], int n)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i=1; i<n; i++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int key = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int j = i-1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(j >=0 && array[j] > key)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j=j-1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = key;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n\r\n        <div id=\"python\" className=\"tabcontent\">\r\n          <br />\r\n          <p>&nbsp;&nbsp;{\"def insertionSort(array, n):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for i in range(1,n):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int key = array[i];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int j = i-1;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(j >=0 && array[j] > key):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = array[j];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j=j-1;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = key;\"}</p>\r\n        </div>\r\n        <div id=\"js\" className=\"tabcontent\">\r\n        <p>&nbsp;&nbsp;{\"function insertionSort( array,  n)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for(let i=1; i<n; i++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let key = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let j = i-1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(j >=0 && array[j] > key)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j=j-1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j+1] = key;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n        </div>\r\n        </section>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//RNG Function\r\n\r\nfunction randomIntFromInterval(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Insertion;\r\n","import React, {Component} from 'react';\r\nimport './CSS/selection.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport bar_outline from './icons/bar-chart-outline.svg'\r\n\r\nconst PRIMARY_COLOR = '#3244a8';\r\nconst SECONDARY_COLOR = '#d40f0f';\r\nconst WIN_WIDTH = (window.innerWidth) /1.6;\r\nconst WIN_HEIGHT = (window.innerHeight) / 1.7;\r\nconst MIN_ARRAY_SIZE = 8;\r\nconst MAX_ARRAY_SIZE = Math.floor(WIN_WIDTH/5);\r\nvar BAR_WIDTH = Math.floor(WIN_WIDTH / MIN_ARRAY_SIZE);\r\nvar TEXT_SIZE = (BAR_WIDTH)/2;\r\nconst MIN_SPEED = 5;\r\nvar array_size = 8;\r\nvar speed = 5;\r\n\r\n/* Sorting Algorithm Fucntions*/\r\n\r\n\r\nfunction SelectionSort(array){\r\n\r\n  const animations = [];\r\n\r\n  for(let i=0;i<array.length-1;i++){\r\n    var min_index = i;\r\n    for(let j=i;j<array.length;j++){\r\n      if(array[min_index] > array[j]){\r\n          min_index = j;\r\n      }\r\n    }\r\n    animations.push([i,min_index]);\r\n\r\n    if( i === min_index)\r\n    {\r\n      animations.push([array[i] , array[min_index], false]);\r\n    }else{\r\n      const temp = array[min_index];\r\n      array[min_index] = array[i];\r\n      array[i] = temp;\r\n      animations.push([array[i] , array[min_index],true]);\r\n    }\r\n\r\n    animations.push([i,min_index]);\r\n  }\r\nreturn animations;\r\n}\r\n\r\n  //Function to animate the bar representing an array\r\n\r\n  export function animateSelectionSort(array,speed){\r\n\r\n    const animations = SelectionSort(array);\r\n\r\n    for(let i=0;i<animations.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n      const isChange = i%3 !== 1;\r\n\r\n      if(isChange){\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        const color = i%3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * speed);\r\n      }else{\r\n          const [barOneIndex, barTwoIndex] = animations[i-1];\r\n          const barOneStyle = arrayBars[barOneIndex].style;\r\n          const barTwoStyle = arrayBars[barTwoIndex].style;\r\n          const [barOneHeight, barTwoHeight] = animations[i];\r\n          setTimeout(() => {\r\n          const text = document.getElementsByClassName('bar-value');\r\n          text[barOneIndex].innerHTML = barOneHeight;\r\n          text[barTwoIndex].innerHTML = barTwoHeight;\r\n          barOneStyle.height = `${barOneHeight}px`;\r\n          barTwoStyle.height = `${barTwoHeight}px`;\r\n        },i*speed)\r\n      }\r\n    }\r\n\r\n  }\r\n/*Drawer function for displaying code*/\r\n\r\nfunction openCity(event, cityName){\r\n  // Declare all variables\r\n  var i, tabcontent, tablinks;\r\n  // Get all elements with class=\"tabcontent\" and hide them\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n\r\n  // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n\r\n  // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n  document.getElementById(cityName).style.display = \"block\";\r\n  // evt.currentTarget.className += \" active\";\r\n  let tag = document.getElementById(cityName);\r\n  event.classname += \" active\";\r\n  tag.click();\r\n}\r\n\r\n\r\n\r\n// Main class to render the entire webpage\r\n\r\nclass Selection extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state= {\r\n      array: [],\r\n      size: '',\r\n      speed: '',\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.resetArray();\r\n    document.getElementById(\"defaultOpen\").click();\r\n\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({size: event.target.value});\r\n  }\r\n\r\n  handleSpeedChange(event){\r\n    this.setState({speed: event.target.value});\r\n  }\r\n\r\n  setArraySize(){\r\n    if(this.state.size !== '' && this.state.size >= 8){\r\n      if(this.state.size > MAX_ARRAY_SIZE){\r\n        array_size = MAX_ARRAY_SIZE;\r\n      }\r\n      else {\r\n        array_size = this.state.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  setSpeed(){\r\n    if(this.state.speed !== '' && this.state.speed >= 5){\r\n      if(this.state.speed < 5){\r\n        speed = MIN_SPEED;\r\n      }\r\n      else {\r\n        speed = this.state.speed;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  resetArray(){\r\n    this.setArraySize();\r\n    var text;\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for(let k=0;k<this.state.array.length;k++){\r\n      arrayBars[k].style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    var setText = document.getElementById('info-text');\r\n    if(array_size === MAX_ARRAY_SIZE){\r\n      text = \"Array of size \" + array_size + \", i.e. maximum number of arrays, is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }else{\r\n      text = \"Array of size \" + array_size + \" is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }\r\n\r\n    setText.innerHTML = text;\r\n    BAR_WIDTH = WIN_WIDTH / array_size;\r\n    TEXT_SIZE = BAR_WIDTH/2;\r\n    const array = [];\r\n    for(let i=0;i<array_size;i++){\r\n      array.push(randomIntFromInterval(5,WIN_HEIGHT));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {array} = this.state;\r\n    this.setSpeed();\r\n    return (\r\n      <div className =\"main\">\r\n        <div class=\"navi-bar\">\r\n          <nav>\r\n          <a href=\"/algoviz/\">\r\n            <div class=\"logo\">\r\n            <img src={bar_outline} alt={\"Logo\"} />\r\n            <h4>AlgoViz</h4>\r\n            </div>\r\n          </a>\r\n          <ul class=\"nav-links\">\r\n            <li >\r\n            <a href=\"/algoviz/\"  class=\"btn-text nav-a\">Home</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/selection-sort/#About\" class=\"btn-text nav-a\">About</a>\r\n            </li><li>\r\n            <a href=\"/algoviz/selection-sort/#visualizer\" class=\"btn-text nav-a\">Visualizer</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/selection-sort/#Code\" class=\"btn-text nav-a\">Code</a>\r\n            </li>\r\n          </ul>\r\n          </nav>\r\n        </div>\r\n        <div class=\"banner-selection\">\r\n        \t<div >\r\n        \t\t<h1 class=\"heading\">SELECTION SORT</h1>\r\n        \t</div>\r\n        </div>\r\n        <section id=\"About\">\r\n        <div class=\"algo\">\r\n        \t<h2 class=\"algo-heading\">ABOUT</h2>\r\n        \t<p class=\"content\">The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.\r\n<br /> 1) The subarray which is already sorted.\r\n<br /> 2) Remaining subarray which is unsorted.\r\n</p>\r\n        \t<div class=\"algo-card\">\r\n                <div class=\"algo-header\">\r\n                  <p class=\"algo-title\">ALGORITHM</p>\r\n                </div>\r\n                <div class=\"card-body algo-body \">\r\n                  <p>&nbsp;&nbsp;begin selectionSort(list)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;for i from 1 to n-1:</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = i</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for j from i+1 to last item</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if list[ j ] less than list[ min ] then\"}</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = j;</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end for loop</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if min is not equal to i</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap(list[i], list[min])</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;end for loop</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;return list</p>\r\n                  <p>&nbsp;&nbsp;end selectionSort</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"complexity\">\r\n              <div class=\"card-group\">\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 class=\"complex-heading\">TIME COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                          <h3><strong>Best Case</strong></h3>\r\n                          <p>O( n<sup>2</sup> )</p>\r\n                          <h3><strong>Worst Case</strong></h3>\r\n                          <p>O( n<sup>2</sup> )</p>\r\n                          <h3><strong>Average Case</strong></h3>\r\n                          <p>O( n<sup>2</sup> )</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3>SPACE COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <p>Single additional memory space is required for swapping</p>\r\n                              <p>O(1)</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 >NUMBER OF COMPARISONS</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                          <h3><strong>For All Cases</strong></h3>\r\n                          <p> n * (n-1) / 2</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        </section>\r\n        <div class=\"visualizer\" id=\"visualizer\">\r\n          <div class=\"visualizer-title\">\r\n          <p><strong>VISUALIZER</strong></p>\r\n          </div>\r\n          {array.map((value, idx) => (\r\n            <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              width: `${BAR_WIDTH}px`,\r\n              height: `${value}px`,\r\n            }}><p className=\"bar-value\" style={{fontSize: `${TEXT_SIZE}px`, }}>{value}</p>\r\n            </div>\r\n          ))}\r\n          <div className=\"info\">\r\n            <p id=\"info-text\"></p>\r\n          </div>\r\n          <div className=\"all-buttons\" style={{marginLeft: `${WIN_WIDTH/3}px`}}>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Array size\" id=\"array-size\" onChange={this.handleChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => this.resetArray()}><strong>Generate New Array</strong></Button>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Time delay (ms)\" id=\"trans-speed\" onChange={this.handleSpeedChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => animateSelectionSort(array, speed)}>Selection Sort</Button>\r\n              </Form.Row>\r\n            </Form>\r\n          </div>\r\n\r\n        </div>\r\n        <section id=\"Code\">\r\n        <div class=\"code\">\r\n        \t<div class=\"tab\">\r\n          \t\t<button className=\"tablinks\" id=\"defaultOpen\" onClick={() => openCity(this,'cpp')}>C++</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'java')}>JAVA</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'python')}>PYTHON</button>\r\n         \t\t  <button className=\"tablinks\" onClick={() => openCity(this,'js')}>JAVASCRIPT</button>\r\n        \t</div>\r\n\r\n        <div id=\"cpp\" className=\"tabcontent\">\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"void selectionSort(int array[], int n)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i=0; i<n; i++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int min = i;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for(int j=i+1; j<n ; j++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[ j ] < array[ min ] )\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"min = j;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(min != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[min];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[min] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n\r\n        <div id=\"java\" className=\"tabcontent\">\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"public void selectionSort(int array[], int n)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i=0; i<n; i++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int min = i\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for(int j=i+1; j<n ; j++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[ j ] < array[ min ] )\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"min = j;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(min != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[min];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[min] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n\r\n        <div id=\"python\" className=\"tabcontent\">\r\n          <br />\r\n          <p>&nbsp;&nbsp;{\"def selectionSort(array, n):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for i in range(0,n):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int min = i\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for j in range(i+1, n):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[ j ] < array[ min ] ):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"min = j;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(min != i):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"temp = array[i];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[min];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[min] = temp;\"}</p>\r\n        </div>\r\n        <div id=\"js\" className=\"tabcontent\">\r\n        <p>&nbsp;&nbsp;{\"function selectionSort(array, n)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (let i=0; i<n; i++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let min = i\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for(let j=i+1; j<n ; j++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[ j ] < array[ min ] )\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"min = j;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(min != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[min];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[min] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n        </div>\r\n        </section>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//RNG Function\r\n\r\nfunction randomIntFromInterval(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Selection;\r\n","import React, {Component} from 'react';\r\nimport './CSS/merge.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport bar_outline from './icons/bar-chart-outline.svg'\r\n\r\nconst PRIMARY_COLOR = '#3244a8';\r\nconst SECONDARY_COLOR = '#d40f0f';\r\nconst WIN_WIDTH = (window.innerWidth) /1.6;\r\nconst WIN_HEIGHT = (window.innerHeight) / 1.7;\r\nconst MIN_ARRAY_SIZE = 8;\r\nvar MAX_ARRAY_SIZE = Math.floor(WIN_WIDTH/5);\r\nvar BAR_WIDTH = Math.floor(WIN_WIDTH / MIN_ARRAY_SIZE);\r\nvar TEXT_SIZE = (BAR_WIDTH)/2;\r\nconst MIN_SPEED = 5;\r\nvar array_size = 8;\r\nvar speed = 10;\r\n\r\n/* Sorting Algorithm Fucntions*/\r\n\r\n\r\nfunction mergeSort(array,start,end,animations)\r\n{\r\n  if(start !== end)\r\n  {\r\n    var mid = Math.floor((start+end)/2);\r\n    mergeSort(array,start,mid,animations);\r\n    mergeSort(array,mid+1,end,animations);\r\n    return(merge(array, start, mid, end,animations));\r\n  }\r\n  else{\r\n    return ;\r\n  }\r\n}\r\n\r\nfunction merge(array, start, mid, end, animations)\r\n{\r\n  let i = start;\r\n  let j = mid+1;\r\n  while(i<= mid && j<=end)\r\n  {\r\n    animations.push([false,i,j,0]);\r\n    if(array[i] <= array[j])\r\n    {\r\n      animations.push([false,i,j,0]);\r\n      animations.push([false,i,j,0]);\r\n      i++;\r\n    }\r\n    else\r\n    {\r\n      const value = array[j];\r\n      var index = j;\r\n      // Shift all the elements between element 1\r\n      // element 2, right by 1.\r\n      animations.push([true,i,j,array[j]]);\r\n\r\n      while (index !== i) {\r\n        array[index] = array[index - 1];\r\n        index--;\r\n      }\r\n      array[i] = value;\r\n      animations.push([false,i,j,0]);\r\n      // Update all the pointers\r\n      i++;\r\n      mid++;\r\n      j++;\r\n    }\r\n\r\n  }\r\n  return animations;\r\n}\r\n\r\n  //Function to animate the bar representing an array\r\n\r\n  export function mainSort(array,speed)\r\n  {\r\n    var animations = [];\r\n    animations = mergeSort(array, 0, array.length-1,animations);\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    const text = document.getElementsByClassName('bar-value');\r\n    let i = 0;\r\n    while(i < animations.length)\r\n    {\r\n      const [isSwapped, barOneIndex, barTwoIndex,barTwoHeight] = animations[i];\r\n      const isChange = i%3 !== 1;\r\n      if(isChange)\r\n      {\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        const color = i%3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() =>\r\n        {\r\n          console.log(color);\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * speed);\r\n\r\n      }\r\n      else\r\n      {\r\n        if(isSwapped)\r\n        {\r\n          setTimeout(()=>\r\n          {\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            var temp = barTwoIndex;\r\n            while(temp !== barOneIndex)\r\n            {\r\n              arrayBars[temp].style.height =  arrayBars[temp-1].style.height ;\r\n              text[temp].innerHTML = text[temp-1].innerHTML;\r\n              temp--;\r\n            }\r\n            barOneStyle.height = `${barTwoHeight}px`;\r\n            text[barOneIndex].innerHTML = barTwoHeight;\r\n          },i*speed);\r\n        }\r\n      }\r\n      i++;\r\n    }\r\n  }\r\n\r\n/*Drawer function for displaying code*/\r\n\r\nfunction openCity(event, cityName){\r\n  // Declare all variables\r\n  var i, tabcontent, tablinks;\r\n  // Get all elements with class=\"tabcontent\" and hide them\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n\r\n  // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n\r\n  // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n  document.getElementById(cityName).style.display = \"block\";\r\n  // evt.currentTarget.className += \" active\";\r\n  let tag = document.getElementById(cityName);\r\n  event.classname += \" active\";\r\n  tag.click();\r\n}\r\n\r\n\r\n\r\n// Main class to render the entire webpage\r\n\r\nclass Merge extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state= {\r\n      array: [],\r\n      size: '',\r\n      speed: '',\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.resetArray();\r\n    document.getElementById(\"defaultOpen\").click();\r\n\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({size: event.target.value});\r\n  }\r\n\r\n  handleSpeedChange(event){\r\n    this.setState({speed: event.target.value});\r\n  }\r\n\r\n  setArraySize(){\r\n    if(this.state.size !== '' && this.state.size >= 8){\r\n      if(this.state.size > MAX_ARRAY_SIZE){\r\n        array_size = MAX_ARRAY_SIZE;\r\n      }\r\n      else {\r\n        array_size = this.state.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  setSpeed(){\r\n    if(this.state.speed !== '' && this.state.speed >= 5){\r\n      if(this.state.speed < 5){\r\n        speed = MIN_SPEED;\r\n      }\r\n      else {\r\n        speed = this.state.speed;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  resetArray(){\r\n    this.setArraySize();\r\n    var text;\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for(let k=0;k<this.state.array.length;k++){\r\n      arrayBars[k].style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    var setText = document.getElementById('info-text');\r\n    if(array_size === MAX_ARRAY_SIZE){\r\n      text = \"Array of size \" + array_size + \", i.e. maximum number of arrays, is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }else{\r\n      text = \"Array of size \" + array_size + \" is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }\r\n\r\n    setText.innerHTML = text;\r\n    BAR_WIDTH = WIN_WIDTH / array_size;\r\n    TEXT_SIZE = BAR_WIDTH/2;\r\n    const array = [];\r\n    for(let i=0;i<array_size;i++){\r\n      array.push(randomIntFromInterval(5,WIN_HEIGHT));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {array} = this.state;\r\n    this.setSpeed();\r\n    return (\r\n      <div className =\"main\">\r\n        <div class=\"navi-bar\">\r\n          <nav>\r\n          <a href=\"/algoviz/\">\r\n            <div class=\"logo\">\r\n            <img src={bar_outline} alt={\"logo\"} />\r\n            <h4>AlgoViz</h4>\r\n            </div>\r\n          </a>\r\n          <ul class=\"nav-links\">\r\n            <li >\r\n            <a href=\"/algoviz/\"  class=\"btn-text nav-a\">Home</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/inplace-merge-sort/#About\" class=\"btn-text nav-a\">About</a>\r\n            </li><li>\r\n            <a href=\"/algoviz/inplace-merge-sort/#visualizer\" class=\"btn-text nav-a\">Visualizer</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/inplace-merge-sort/#Code\" class=\"btn-text nav-a\">Code</a>\r\n            </li>\r\n          </ul>\r\n          </nav>\r\n        </div>\r\n        <div class=\"banner-merge\">\r\n        \t<div >\r\n        \t\t<h1 class=\"heading\">MERGE SORT</h1>\r\n        \t</div>\r\n        </div>\r\n        <section id=\"About\">\r\n        <div class=\"algo\">\r\n        \t<h2 class=\"algo-heading\">ABOUT</h2>\r\n        \t<p class=\"content\">Merge sort is one of the most efficient sorting algorithms. It works on the principle of Divide and Conquer. Merge sort repeatedly breaks down a list into several sublists until each sublist consists of a single element and merging those sublists in a manner that results into a sorted list.</p>\r\n        \t<div class=\"algo-card\">\r\n                <div class=\"algo-header\">\r\n                  <p class=\"algo-title\">ALGORITHM</p>\r\n                </div>\r\n                <div class=\"card-body algo-body \">\r\n\r\n                  <p>&nbsp;&nbsp;begin merge( list, start, middle, end )</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;let i be start</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;let j be middle+1</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"if( list[ middle ] is less than or equal to list[ j ] )\"}</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end merge or return</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;while i is less than equal to middle AND j is less than equal to end</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if( list[ i ] is less than or equal to list[ j ] )\"}</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment i by 1 or i++</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let temp be list[ j ]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let index be j</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while index is not equal to i</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list[ index ] = list [index -1]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decrement index by 1 or index--</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end while loop</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list[ i ] = temp</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment i by 1 or i++</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment middle by 1 or middle++</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment j by 1 or j++</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if else</p>\r\n                  <p>&nbsp;&nbsp;end merge</p>\r\n\r\n                  <br />\r\n                  <br />\r\n                  <p>&nbsp;&nbsp;begin mergeSort( list, start, end )</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if end is not equal to start</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle = ( start + end ) / 2</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mergeSort( list, start, middle)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mergeSort( list, middle+1, end)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge( list, start, middle, end)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;end mergeSort</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"complexity\">\r\n              <div class=\"card-group\">\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 class=\"complex-heading\">TIME COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                            <h3><strong>Best Case</strong></h3>\r\n                            <p>O( n<sup>2</sup> )</p>\r\n                            <h3><strong>Worst Case</strong></h3>\r\n                            <p>O( n<sup>2</sup> )</p>\r\n                            <h3><strong>Average Case</strong></h3>\r\n                            <p>O( n<sup>2</sup> )</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3>SPACE COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <p>Additional memory space is required for storing call stack formed due to recursion.</p>\r\n                              <p>O(log(n))</p>\r\n                              <p>For normal merge sort an auxillary array is used.</p>\r\n                              <p>O( n )</p>\r\n\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 >NUMBER OF COMPARISONS</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <h3><strong>For All Cases</strong></h3>\r\n                              <p>n comparisons</p>\r\n\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        </section>\r\n        <div class=\"visualizer\" id=\"visualizer\">\r\n          <div class=\"visualizer-title\">\r\n          <p><strong>VISUALIZER</strong></p>\r\n          </div>\r\n          {array.map((value, idx) => (\r\n            <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              width: `${BAR_WIDTH}px`,\r\n              height: `${value}px`,\r\n            }}><p className=\"bar-value\" style={{fontSize: `${TEXT_SIZE}px`, }}>{value}</p>\r\n            </div>\r\n          ))}\r\n          <div className=\"info\">\r\n            <p id=\"info-text\"></p>\r\n          </div>\r\n          <div className=\"all-buttons\" style={{marginLeft: `${WIN_WIDTH/3}px`}}>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Array size\" id=\"array-size\" onChange={this.handleChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => this.resetArray()}><strong>Generate New Array</strong></Button>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Time delay (ms)\" id=\"trans-speed\" onChange={this.handleSpeedChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => mainSort(array, speed)}>Merge Sort</Button>\r\n              </Form.Row>\r\n            </Form>\r\n          </div>\r\n\r\n        </div>\r\n        <section id=\"Code\">\r\n        <div class=\"code\">\r\n        \t<div class=\"tab\">\r\n          \t\t<button className=\"tablinks\" id=\"defaultOpen\" onClick={() => openCity(this,'cpp')}>C++</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'java')}>JAVA</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'python')}>PYTHON</button>\r\n         \t\t  <button className=\"tablinks\" onClick={() => openCity(this,'js')}>JAVASCRIPT</button>\r\n        \t</div>\r\n\r\n        <div id=\"cpp\" className=\"tabcontent\">\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"void merge(int array[], int start, int mid, int end)\"} </p>\r\n        <p>&nbsp;&nbsp;{\"{\"} </p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"int i = start;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"int j = mid+1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[mid] <= array[j])\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"while(i <= mid && j <= end)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[i] <= array[j]) \"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"else\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int index = j\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(index != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ index ] = array[index -1];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"index--;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ i ] = temp\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mid++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        <br />\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"void mergeSort(int array[], int start, int end)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(start != end)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int middle = ( start + end ) / 2;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, start, middle);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, middle+1, end);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"merge(array, start, middle, end);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n\r\n        <div id=\"java\" className=\"tabcontent\">\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"void merge(int array[], int start, int mid, int end)\"} </p>\r\n        <p>&nbsp;&nbsp;{\"{\"} </p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"int i = start;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"int j = mid+1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[mid] <= array[j])\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"while(i <= mid && j <= end)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[i] <= array[j]) \"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"else\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int index = j\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(index != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ index ] = array[index -1];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"index--;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ i ] = temp\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mid++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        <br />\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"public void mergeSort(int array[], int start, int end)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(start != end)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int middle = ( start + end ) / 2;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, start, middle);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, middle+1, end);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"merge(array, start, middle, end);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n\r\n        <div id=\"python\" className=\"tabcontent\">\r\n          <br />\r\n          <p>&nbsp;&nbsp;{\"def merge(array, start, mid, end): \"} </p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"i = start;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"j = mid+1;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"if array[mid] <= array[j]:\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"while(i <= mid && j <= end):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[i] <= array[j]):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i=i+1;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"else:\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"temp = array[j];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"index = j\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(index != i):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ index ] = array[index -1];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"index--;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ i ] = temp\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i=i+1;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mid=mid+1;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j=j+1;\"}</p>\r\n          <br />\r\n          <br />\r\n          <p>&nbsp;&nbsp;{\"def mergeSort(int array[], int start, int end):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(start != end):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"middle = ( start + end ) / 2;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, start, middle);\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, middle+1, end);\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"merge(array, start, middle, end);\"}</p>\r\n        </div>\r\n        <div id=\"js\" className=\"tabcontent\">\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"function merge(array, start, mid, end)\"} </p>\r\n        <p>&nbsp;&nbsp;{\"{\"} </p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"let i = start;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"let j = mid+1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[mid] <= array[j])\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"while(i <= mid && j <= end)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[i] <= array[j]) \"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"else\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let temp = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let index = j\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"while(index != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ index ] = array[index -1];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"index--;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[ i ] = temp\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mid++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"j++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        <br />\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"function mergeSort(array, start, end)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if(start != end)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let middle = Math.floor(( start + end ) / 2);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, start, middle);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"mergeSort(array, middle+1, end);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"merge(array, start, middle, end);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"}</p>\r\n        </div>\r\n        </div>\r\n        </section>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//RNG Function\r\n\r\nfunction randomIntFromInterval(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Merge;\r\n","import React, {Component} from 'react';\r\nimport './CSS/quick.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport bar_outline from './icons/bar-chart-outline.svg'\r\n\r\nconst PRIMARY_COLOR = '#3244a8';\r\nconst SECONDARY_COLOR = '#d40f0f';\r\nconst WIN_WIDTH = (window.innerWidth) /1.6;\r\nconst WIN_HEIGHT = (window.innerHeight) / 1.7;\r\nconst MIN_ARRAY_SIZE = 8;\r\nconst MAX_ARRAY_SIZE = Math.floor(WIN_WIDTH/5);\r\nvar BAR_WIDTH = Math.floor(WIN_WIDTH / MIN_ARRAY_SIZE);\r\nvar TEXT_SIZE = (BAR_WIDTH)/2;\r\nconst MIN_SPEED = 5;\r\nvar array_size = 8;\r\nvar speed = 10;\r\nvar animations = [];\r\n/* Sorting Algorithm Fucntions*/\r\n\r\nfunction QuickSort(array, low, high){\r\n\r\n    if (low < high)\r\n    {\r\n        /* pi is partitioning index, array[pi] is now\r\n           at right place */\r\n        var pi = partition(array, low, high);\r\n        QuickSort(array, low, pi - 1);  // Before pi\r\n        QuickSort(array, pi + 1, high); // After pi\r\n    }\r\n}\r\n\r\nfunction partition(array, low, high){\r\n\r\n    const pivot = array[high];\r\n    var i = low  // Index of smaller element\r\n    var temp;\r\n\r\n    for (let j = low; j < high; j++)\r\n    {\r\n        // If current element is smaller than the pivot\r\n        if (array[j] < pivot)\r\n        {\r\n\r\n            animations.push([j,high]);\r\n            temp = array[j];\r\n            array[j] = array[i];\r\n            array[i] = temp;\r\n            animations.push([i,j,array[i], array[j]]);\r\n            animations.push([j,high]);\r\n            i++;    // increment index of smaller element\r\n        }\r\n    }\r\n    animations.push([i,high]);\r\n    temp = array[i];\r\n    array[i] = array[high];\r\n    array[high] = temp;\r\n    animations.push([i,high,array[i], array[high]]);\r\n    animations.push([i,high]);\r\n    return (i);\r\n}\r\n\r\n\r\n  //Function to animate the bar representing an array\r\n\r\n  export function animateQuickSort(array,speed){\r\n\r\n    var setText = document.getElementById('info-text');\r\n    var infoText = '';\r\n    animations = [];\r\n    QuickSort(array,0, array.length-1);\r\n    for(let i=0;i<animations.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isChange = i%3 !== 1;\r\n      if(isChange){\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        const color = i%3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n\r\n          setText.innerHTML = infoText;\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * speed);\r\n      }else{\r\n          const [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIndex].style;\r\n          const barTwoStyle = arrayBars[barTwoIndex].style;\r\n          const text = document.getElementsByClassName('bar-value');\r\n          setTimeout(() => {\r\n\r\n          text[barOneIndex].innerHTML = barOneHeight;\r\n          text[barTwoIndex].innerHTML = barTwoHeight;\r\n          barOneStyle.height = `${barOneHeight}px`;\r\n          barTwoStyle.height = `${barTwoHeight}px`;\r\n        },i*speed);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n/*Drawer function for displaying code*/\r\n\r\nfunction openCity(event, cityName){\r\n  // Declare all variables\r\n  var i, tabcontent, tablinks;\r\n  // Get all elements with class=\"tabcontent\" and hide them\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n\r\n  // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n\r\n  // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n  document.getElementById(cityName).style.display = \"block\";\r\n  // evt.currentTarget.className += \" active\";\r\n  let tag = document.getElementById(cityName);\r\n  event.classname += \" active\";\r\n  tag.click();\r\n}\r\n\r\n\r\n\r\n// Main class to render the entire webpage\r\n\r\nclass Quick extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state= {\r\n      array: [],\r\n      size: '',\r\n      speed: '',\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.resetArray();\r\n    document.getElementById(\"defaultOpen\").click();\r\n\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({size: event.target.value});\r\n  }\r\n\r\n  handleSpeedChange(event){\r\n    this.setState({speed: event.target.value});\r\n  }\r\n\r\n  setArraySize(){\r\n    if(this.state.size !== '' && this.state.size >= 8){\r\n      if(this.state.size > MAX_ARRAY_SIZE){\r\n        array_size = MAX_ARRAY_SIZE;\r\n      }\r\n      else {\r\n        array_size = this.state.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  setSpeed(){\r\n    if(this.state.speed !== '' && this.state.speed >= 5){\r\n      if(this.state.speed < 5){\r\n        speed = MIN_SPEED;\r\n      }\r\n      else {\r\n        speed = this.state.speed;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  resetArray(){\r\n    this.setArraySize();\r\n    var text;\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for(let k=0;k<this.state.array.length;k++){\r\n      arrayBars[k].style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    var setText = document.getElementById('info-text');\r\n    if(array_size === MAX_ARRAY_SIZE){\r\n      text = \"Array of size \" + array_size + \", i.e. maximum number of arrays, is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }else{\r\n      text = \"Array of size \" + array_size + \" is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }\r\n\r\n    setText.innerHTML = text;\r\n    BAR_WIDTH = WIN_WIDTH / array_size;\r\n    TEXT_SIZE = BAR_WIDTH/2;\r\n    const array = [];\r\n    for(let i=0;i<array_size;i++){\r\n      array.push(randomIntFromInterval(5,WIN_HEIGHT));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {array} = this.state;\r\n    this.setSpeed();\r\n    return (\r\n      <div className =\"main\">\r\n        <div class=\"navi-bar\">\r\n          <nav>\r\n          <a href=\"/algoviz/\">\r\n            <div class=\"logo\">\r\n            <img src={bar_outline} alt={\"Logo\"}/>\r\n            <h4>AlgoViz</h4>\r\n            </div>\r\n          </a>\r\n          <ul class=\"nav-links\">\r\n            <li >\r\n            <a href=\"/algoviz/\"  class=\"btn-text nav-a\">Home</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/quick-sort/#About\" class=\"btn-text nav-a\">About</a>\r\n            </li><li>\r\n            <a href=\"/algoviz/quick-sort/#visualizer\" class=\"btn-text nav-a\">Visualizer</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/quick-sort/#Code\" class=\"btn-text nav-a\">Code</a>\r\n            </li>\r\n          </ul>\r\n          </nav>\r\n        </div>\r\n        <div class=\"banner-quick\">\r\n        \t<div >\r\n        \t\t<h1 class=\"heading\">QUICK SORT</h1>\r\n        \t</div>\r\n        </div>\r\n        <section id=\"About\">\r\n        <div class=\"algo\">\r\n        \t<h2 class=\"algo-heading\">ABOUT</h2>\r\n        \t<p class=\"content\">QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements before x, and put all greater elements after x. </p>\r\n        \t<div class=\"algo-card\">\r\n                <div class=\"algo-header\">\r\n                  <p class=\"algo-title\">ALGORITHM</p>\r\n                </div>\r\n                <div class=\"card-body algo-body \">\r\n                  <p>&nbsp;&nbsp;begin partition(array, leftmostIndex, rightmostIndex)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let pivot be equal to array[rightmostIndex]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let storeIndex be equal to leftmostIndex</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i from leftmostIndex to rightmostIndex</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if array[ i ] is less than pivot</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap( array[i] , array[storeIndex])</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increment storeIndex by 1 or storeIndex++</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end for loop</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ( array[storeIndex] , array[rightmostIndex] )</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return storeIndex</p>\r\n                  <p>&nbsp;&nbsp;end partition</p>\r\n                  <br/>\r\n                  <br/>\r\n                  <p>&nbsp;&nbsp;begin quickSort(array, leftmostIndex, rightmostIndex)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if leftmostIndex is less than rightmostIndex\"}</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let pivotIndex = partition(array, leftmostIndex, rightmostIndex)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quickSort(array, leftmostIndex, pivotIndex)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quickSort(array, pivotIndex + 1, rightmostIndex)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;end quickSort</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"complexity\">\r\n              <div class=\"card-group\">\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 class=\"complex-heading\">TIME COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                            <h3><strong>Best Case</strong></h3>\r\n                            <p>O( nlog(n) )</p>\r\n                            <h3><strong>Worst Case</strong></h3>\r\n                            <p>O( n<sup>2</sup> )</p>\r\n                            <h3><strong>Average Case</strong></h3>\r\n                            <p>O( nlog(n) )</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3>SPACE COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                            <p>Additional memory space is required for storing call stack formed due to recursion.</p>\r\n                            <p>O(log(n))</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 >NUMBER OF COMPARISONS</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <h3><strong>Best Case</strong></h3>\r\n                              <p>nlog(n) comparisons</p>\r\n                              <h3><strong>Worst Case</strong></h3>\r\n                              <p>n<sup>2</sup>/2 comparisons</p>\r\n                              <h3><strong>Average Case</strong></h3>\r\n                              <p>nlog(n) comparisons</p>\r\n\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        </section>\r\n        <div class=\"visualizer\" id=\"visualizer\">\r\n          <div class=\"visualizer-title\">\r\n          <p><strong>VISUALIZER</strong></p>\r\n          </div>\r\n          {array.map((value, idx) => (\r\n            <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              width: `${BAR_WIDTH}px`,\r\n              height: `${value}px`,\r\n            }}><p className=\"bar-value\" style={{fontSize: `${TEXT_SIZE}px`, }}>{value}</p>\r\n            </div>\r\n          ))}\r\n          <div className=\"info\">\r\n            <p id=\"info-text\"></p>\r\n          </div>\r\n          <div className=\"all-buttons\" style={{marginLeft: `${WIN_WIDTH/3}px`}}>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Array size\" id=\"array-size\" onChange={this.handleChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => this.resetArray()}><strong>Generate New Array</strong></Button>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Time delay (ms)\" id=\"trans-speed\" onChange={this.handleSpeedChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => animateQuickSort(array, speed)}>Quick Sort</Button>\r\n              </Form.Row>\r\n            </Form>\r\n          </div>\r\n\r\n        </div>\r\n        <section id=\"Code\">\r\n        <div class=\"code\">\r\n        \t<div class=\"tab\">\r\n          \t\t<button className=\"tablinks\" id=\"defaultOpen\" onClick={() => openCity(this,'cpp')}>C++</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'java')}>JAVA</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'python')}>PYTHON</button>\r\n         \t\t  <button className=\"tablinks\" onClick={() => openCity(this,'js')}>JAVASCRIPT</button>\r\n        \t</div>\r\n\r\n        <div id=\"cpp\" className=\"tabcontent\">\r\n        <br/>\r\n         \t  <p>&nbsp;&nbsp;{\"int partition (int array[], int low, int high) \"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int pivot = array[high];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int i = low;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int j=low; j < high; j++)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[j] < pivot)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[j];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j] = temp;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[high];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[high] = temp;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return i;\"}</p>\r\n            <p>&nbsp;&nbsp;{\"}\"} </p>\r\n            <br/>\r\n            <br/>\r\n            <p>&nbsp;&nbsp;{\"void quickSort(int array[], int low, int high) \"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (low < high)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int pivot = partition(array, low, high);\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, low, pivot-1);\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, pivot+1, high);\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        </div>\r\n\r\n        <div id=\"java\" className=\"tabcontent\">\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"int partition (int array[], int low, int high) \"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int pivot = array[high];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int i = low;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int j=low; j < high; j++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[j] < pivot)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[high];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[high] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return i;\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        <br/>\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"public void quickSort(int array[], int low, int high) \"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (low < high)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int pivot = partition(array, low, high);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, low, pivot-1);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, pivot+1, high);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        </div>\r\n\r\n        <div id=\"python\" className=\"tabcontent\">\r\n          <br />\r\n          <p>&nbsp;&nbsp;{\"def partition(array,low,high): \"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"pivot = array[high];\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i = low\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for j in range(low , high):  \"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if   array[j] < pivot: \"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i],array[j] = array[j],array[i] \"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i=i+1\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i],array[high] = array[high],array[i]\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return i;\"}</p>\r\n          <br/>\r\n          <br/>\r\n          <p>&nbsp;&nbsp;{\"def quickSort(array,low,high):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (low < high)\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"pivot = partition(array, low, high);\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, low, pivot-1);\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, pivot+1, high);\"}</p>\r\n        </div>\r\n        <div id=\"js\" className=\"tabcontent\">\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"function partition(array, low, high) \"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let pivot = array[high];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let i = low;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (let j=low; j < high; j++)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (array[j] < pivot)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[j];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[j] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"i++;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[high];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[high] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"return i;\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        <br/>\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"function quickSort(array, low, high) \"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (low < high)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let pivot = partition(array, low, high);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, low, pivot-1);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"quickSort(array, pivot+1, high);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        </div>\r\n        </div>\r\n        </section>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//RNG Function\r\n\r\nfunction randomIntFromInterval(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Quick;\r\n","import React, {Component} from 'react';\r\nimport './CSS/heap.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport bar_outline from './icons/bar-chart-outline.svg';\r\n\r\nconst PRIMARY_COLOR = '#3244a8';\r\nconst SECONDARY_COLOR = '#d40f0f';\r\nconst WIN_WIDTH = (window.innerWidth) /1.6;\r\nconst WIN_HEIGHT = (window.innerHeight) / 1.7;\r\nconst MIN_ARRAY_SIZE = 8;\r\nconst MAX_ARRAY_SIZE = Math.floor(WIN_WIDTH/5);\r\nvar BAR_WIDTH = Math.floor(WIN_WIDTH / MIN_ARRAY_SIZE);\r\nvar TEXT_SIZE = (BAR_WIDTH)/2;\r\nconst MIN_SPEED = 5;\r\nvar array_size = 8;\r\nvar speed = 10;\r\n\r\n/* Sorting Algorithm Fucntions*/\r\n\r\nfunction heapify(array, n, i,animations)\r\n{\r\n  let largest = i;\r\n  let l = (2*i)+1;\r\n  let r = (2*i)+2;\r\n\r\n  if(l<=n && array[l] > array[largest])\r\n  {\r\n    largest = l;\r\n  }\r\n  if(r<=n && array[r] > array[largest])\r\n  {\r\n    largest = r;\r\n  }\r\n  if( largest !== i)\r\n  {\r\n    animations.push([i,largest]);\r\n    animations.push([i,largest]);\r\n    let temp = array[i];\r\n    array[i]=array[largest];\r\n    array[largest]=temp;\r\n  }\r\n  if(largest !== i)\r\n  {\r\n    animations.push([i,largest]);\r\n    heapify(array,n,largest,animations);\r\n  }\r\n}\r\n\r\nfunction heapSort(array)\r\n{\r\n  const animations =[];\r\n  let n = array.length-1;\r\n  for(let i=Math.floor(n/2); i>=0 ; i--)\r\n  {\r\n    heapify(array,n,i,animations);\r\n  }\r\n  for(let j=n; j>=0; j--)\r\n  {\r\n    animations.push([0,j])\r\n    animations.push([0,j])\r\n    let t = array[0];\r\n    array[0] = array[j];\r\n    array[j] = t;\r\n    animations.push([0,j])\r\n    heapify(array,j-1,0,animations)\r\n  }\r\n  return animations;\r\n}\r\n\r\n  //Function to animate the bar representing an array\r\n\r\nfunction animateHeapSort(array, speed){\r\n\r\n    const animations = heapSort(array);\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n    for(let i=0;i<animations.length;i++){\r\n      const isChange = i%3 !== 1;\r\n      if(isChange){\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        const color = i%3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * speed);\r\n      }else{\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n            const text = document.getElementsByClassName('bar-value');\r\n            const barOneHeight = text[barOneIndex].innerHTML;\r\n            const barTwoHeight = text[barTwoIndex].innerHTML;\r\n            text[barOneIndex].innerHTML = barTwoHeight;\r\n            text[barTwoIndex].innerHTML = barOneHeight;\r\n            barOneStyle.height = `${barTwoHeight}px`;\r\n            barTwoStyle.height = `${barOneHeight}px`;\r\n        },i*speed);\r\n      }\r\n    }\r\n  }\r\n\r\n/*Drawer function for displaying code*/\r\n\r\nfunction openCity(event, cityName){\r\n  // Declare all variables\r\n  var i, tabcontent, tablinks;\r\n  // Get all elements with class=\"tabcontent\" and hide them\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n\r\n  // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n\r\n  // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n  document.getElementById(cityName).style.display = \"block\";\r\n  // evt.currentTarget.className += \" active\";\r\n  let tag = document.getElementById(cityName);\r\n  event.classname += \" active\";\r\n  tag.click();\r\n}\r\n\r\n\r\n// for(let k=0; k<2; k++){\r\n//   const arrayBars = document.getElementsByClassName('array-bar');\r\n//   const barOneStyle = arrayBars[j].style;\r\n//   const barTwoStyle = arrayBars[j+1].style;\r\n//   if(k === 0)\r\n//   {\r\n//     setTimeout(() => {\r\n//       barOneStyle.backgroundColor = 'red';\r\n//       barTwoStyle.backgroundColor = 'red';\r\n//       barOneStyle.height = `${array[j]}px`;\r\n//       barTwoStyle.height = `${array[j+1]}px`;\r\n//     },i*1000);\r\n//   }\r\n//   else{\r\n//     setTimeout(() => {\r\n//       barOneStyle.backgroundColor = '#34eb77';\r\n//       barTwoStyle.backgroundColor = '#34eb77';\r\n//     },i*1000);\r\n//   }\r\n\r\n// setTimeout(() => {\r\n//   barOneStyle.backgroundColor = 'black';\r\n// },j*1000)\r\n\r\n\r\n// Main class to render the entire webpage\r\n\r\nclass Heap extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state= {\r\n      array: [],\r\n      size: '',\r\n      speed: '',\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.resetArray();\r\n    document.getElementById(\"defaultOpen\").click();\r\n\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({size: event.target.value});\r\n  }\r\n\r\n  handleSpeedChange(event){\r\n    this.setState({speed: event.target.value});\r\n  }\r\n\r\n  setArraySize(){\r\n    if(this.state.size !== '' && this.state.size >= 8){\r\n      if(this.state.size > MAX_ARRAY_SIZE){\r\n        array_size = MAX_ARRAY_SIZE;\r\n      }\r\n      else {\r\n        array_size = this.state.size;\r\n      }\r\n    }\r\n  }\r\n\r\n  setSpeed(){\r\n    if(this.state.speed !== '' && this.state.speed >= 5){\r\n      if(this.state.speed < 5){\r\n        speed = MIN_SPEED;\r\n      }\r\n      else {\r\n        speed = this.state.speed;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  resetArray(){\r\n    this.setArraySize();\r\n    var text;\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for(let k=0;k<this.state.array.length;k++){\r\n      arrayBars[k].style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n    var setText = document.getElementById('info-text');\r\n    if(array_size === MAX_ARRAY_SIZE){\r\n      text = \"Array of size \" + array_size + \", i.e. maximum number of arrays, is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }else{\r\n      text = \"Array of size \" + array_size + \" is created. <br>Note: To see step by step sorting, time delay should be greater than 500 milliseconds.\";\r\n    }\r\n\r\n    setText.innerHTML = text;\r\n    BAR_WIDTH = WIN_WIDTH / array_size;\r\n    TEXT_SIZE = BAR_WIDTH/2;\r\n    const array = [];\r\n    for(let i=0;i<array_size;i++){\r\n      array.push(randomIntFromInterval(5,WIN_HEIGHT));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {array} = this.state;\r\n    this.setSpeed();\r\n    return (\r\n      <div className =\"main\">\r\n        <div class=\"navi-bar\">\r\n          <nav>\r\n          <a href=\"/algoviz/\">\r\n            <div class=\"logo\">\r\n            <img src={bar_outline} alt={\"Logo\"}/>\r\n            <h4>AlgoViz</h4>\r\n            </div>\r\n          </a>\r\n          <ul class=\"nav-links\">\r\n            <li >\r\n            <a href=\"/algoviz/\"  class=\"btn-text nav-a\">Home</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/heap-sort/#About\" class=\"btn-text nav-a\">About</a>\r\n            </li><li>\r\n            <a href=\"/algoviz/heap-sort/#visualizer\" class=\"btn-text nav-a\">Visualizer</a>\r\n            </li>\r\n            <li>\r\n            <a href=\"/algoviz/heap-sort/#Code\" class=\"btn-text nav-a\">Code</a>\r\n            </li>\r\n          </ul>\r\n          </nav>\r\n        </div>\r\n        <div class=\"banner-heap\">\r\n        \t<div >\r\n        \t\t<h1 class=\"heading\">HEAP SORT</h1>\r\n        \t</div>\r\n        </div>\r\n        <section id=\"About\">\r\n        <div class=\"algo\">\r\n        \t<h2 class=\"algo-heading\">ABOUT</h2>\r\n        \t<p class=\"content\">Heap sort is a comparison based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the maximum element and place the maximum element at the end.</p>\r\n        \t<div class=\"algo-card\">\r\n                <div class=\"algo-header\">\r\n                  <p class=\"algo-title\">ALGORITHM</p>\r\n                </div>\r\n                <div class=\"card-body algo-body \">\r\n                  <p>&nbsp;&nbsp;begin maxHeapify(array, length, node)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let largestNode = node</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let leftLeaf = 2*node</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let rightLeaf = 2*node + 1</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if leftLeaf is less than length AND array[leftLeaf] is greater than array[largestNode]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;largestNode = leftLeaf</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if rightLeaf is less than length of array AND array[rightLeaf] is greater than array[largestNode]</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;largestNode = rightLeaf</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if largestNode is not equal to node</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap( array[node] , array[largestNode] )</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end if</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxHeapify(array, length, largestNode)</p>\r\n                  <p>&nbsp;&nbsp;end maxHeapify</p>\r\n                  <br />\r\n                  <br />\r\n                  <p>&nbsp;&nbsp;begin heapSort(array, length)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i from length/2 to starting index</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxHeapify(array, length, i)</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end for loop</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for unsortedLength from length-1 to starting index</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap( array[\"starting index\"], array[unsortedLength+1])</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxHeapify(array, unsortedLength, \"starting index\")</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end for loop</p>\r\n                  <p>&nbsp;&nbsp;end heapSort</p>\r\n                  <br />\r\n                  <br />\r\n                  <p>&nbsp;&nbsp;Note: 'starting index' can be either 0 or 1 as per choice. 'starting index' does not represent a variable name.</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"complexity\">\r\n              <div class=\"card-group\">\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 class=\"complex-heading\">TIME COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                          <h3><strong>Best Case</strong></h3>\r\n                          <p>O( nlog(n) )</p>\r\n                          <h3><strong>Best Case</strong></h3>\r\n                          <p>O( nlog(n) )</p>\r\n                          <h3><strong>Best Case</strong></h3>\r\n                          <p>O( nlog(n) )</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3>SPACE COMPLEXITY</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <p>Single additional memory space is required for swapping</p>\r\n                              <p>O(1)</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                  <div class=\"card complex-card\">\r\n                        <div class=\"card-header complex-header\">\r\n                           <h3 >NUMBER OF COMPARISONS</h3>\r\n                        </div>\r\n                          <div class=\"card-body\">\r\n                              <h3><strong>For All Cases</strong></h3>\r\n                              <p>2nlog(n)</p>\r\n                          </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        </section>\r\n        <div class=\"visualizer\" id=\"visualizer\">\r\n          <div class=\"visualizer-title\">\r\n          <p><strong>VISUALIZER</strong></p>\r\n          </div>\r\n          {array.map((value, idx) => (\r\n            <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              width: `${BAR_WIDTH}px`,\r\n              height: `${value}px`,\r\n            }}><p className=\"bar-value\" style={{fontSize: `${TEXT_SIZE}px`, }}>{value}</p>\r\n            </div>\r\n          ))}\r\n          <div className=\"info\">\r\n            <p id=\"info-text\"></p>\r\n          </div>\r\n          <div className=\"all-buttons\" style={{marginLeft: `${WIN_WIDTH/3}px`}}>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Array size\" id=\"array-size\" onChange={this.handleChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => this.resetArray()}><strong>Generate New Array</strong></Button>\r\n                <Form.Control size=\"text\" type=\"text\" placeholder=\"Time delay (ms)\" id=\"trans-speed\" onChange={this.handleSpeedChange} className=\"input-field\"/>\r\n                <Button  className = \"buttons\" onClick={() => animateHeapSort(array, speed)}>Heap Sort</Button>\r\n              </Form.Row>\r\n            </Form>\r\n          </div>\r\n\r\n        </div>\r\n        <section id=\"Code\">\r\n        <div class=\"code\">\r\n        \t<div class=\"tab\">\r\n          \t\t<button className=\"tablinks\" id=\"defaultOpen\" onClick={() => openCity(this,'cpp')}>C++</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'java')}>JAVA</button>\r\n          \t\t<button className=\"tablinks\" onClick={() => openCity(this, 'python')}>PYTHON</button>\r\n         \t\t  <button className=\"tablinks\" onClick={() => openCity(this,'js')}>JAVASCRIPT</button>\r\n        \t</div>\r\n\r\n        <div id=\"cpp\" className=\"tabcontent\">\r\n        <br/>\r\n         \t  <p>&nbsp;&nbsp;{\"void maxHeapify(int array[], int n, int i)\"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int largest = i;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int l = 2 * i + 1;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int r = 2 * i + 2;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (l < n && array[l] > array[largest])\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = l;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (r < n && array[r] > array[largest])\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = r;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (largest != i)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[largest];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[largest] = temp;\"}</p>            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, n, largest);\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n\r\n        \t  <p>&nbsp;&nbsp;{\"}\"} </p>\r\n            <br/>\r\n            <br/>\r\n            <p>&nbsp;&nbsp;{\"void heapSort(int array[], int n)\"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i = n/2 - 1; i >= 0; i--)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, n, i);\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i = n-1 ; i >= 0; i--)\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[0];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[0] = array[i];\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = temp;\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, i-1, 0);\"}</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        \t  <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        </div>\r\n\r\n        <div id=\"java\" className=\"tabcontent\">\r\n        <br />\r\n        <p>&nbsp;&nbsp;{\"void maxHeapify(int array[], int n, int i)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int largest = i;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int l = 2 * i + 1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int r = 2 * i + 2;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (l < n && array[l] > array[largest])\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = l;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (r < n && array[r] > array[largest])\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = r;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (largest != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[largest];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[largest] = temp;\"}</p>\r\n                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, n, largest);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        <br/>\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"public void heapSort(int array[])\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int n = array.length;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i = n/2 - 1; i >= 0; i--)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, n, i);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (int i = n-1 ; i >= 0; i--)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"int temp = array[0];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[0] = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = temp;\"}</p>\r\n         <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, i-1, 0);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        </div>\r\n\r\n        <div id=\"python\" className=\"tabcontent\">\r\n          <br />\r\n          <p>&nbsp;&nbsp;{\"def heapify(array, n, i):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = i;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"l = 2 * i + 1;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"r = 2 * i + 2;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (l < n and array[l] > array[largest]):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = l;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (r < n and array[r] > array[largest]):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = r;\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (largest != i):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i], array[largest] = array[largest], array[i]\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, n, largest);\"}</p>\r\n          <br/>\r\n          <br/>\r\n          <p>&nbsp;&nbsp;{\"def heapSort(array):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"n = len(array)\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for i in range(n//2 - 1, -1, -1):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, n, i);\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for i in range(n-1, -1, -1):\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[0], array[i] = array[i], array[0]\"}</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, i-1, 0);\"}</p>\r\n        </div>\r\n        <div id=\"js\" className=\"tabcontent\">\r\n        <p>&nbsp;&nbsp;{\"function maxHeapify(array, n, i)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let largest = i;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"const l = 2 * i + 1;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"const r = 2 * i + 2;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (l < n && array[l] > array[largest])\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = l;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (r < n && array[r] > array[largest])\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"largest = r;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"if (largest != i)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let temp = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = array[largest];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[largest] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, n, largest);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        <br/>\r\n        <br/>\r\n        <p>&nbsp;&nbsp;{\"function heapSort(array)\"}</p>\r\n        <p>&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let n = array.length;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (let i = n/2 - 1; i >= 0; i--)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, i);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"for (let i = n-1 ; i >= 0; i--)\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"{\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"let temp = array[0];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[0] = array[i];\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"array[i] = temp;\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"maxHeapify(array, i-1, 0);\"}</p>\r\n        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"}\"}</p>\r\n        <p>&nbsp;&nbsp;{\"}\"} </p>\r\n        </div>\r\n        </div>\r\n        </section>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//RNG Function\r\n\r\nfunction randomIntFromInterval(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Heap;\r\n","import React from 'react';\nimport './App.css';\n\nimport Home from './Content/Home.js';\nimport Bubble from './Content/Bubble.js'\nimport Insertion from './Content/Insertion.js'\nimport Selection from './Content/Selection.js'\nimport Merge from './Content/InPlaceMerge.js'\nimport Quick from './Content/Quick.js'\nimport Heap from './Content/Heap.js'\n\nimport {Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/algoviz\" component={Home} />\n      <Route exact path=\"/algoviz/bubble-sort\" component={Bubble} />\n      <Route exact path=\"/algoviz/insertion-sort\" component={Insertion} />\n      <Route exact path=\"/algoviz/selection-sort\" component={Selection} />\n      <Route exact path=\"/algoviz/inplace-merge-sort\" component={Merge} />\n      <Route exact path=\"/algoviz/quick-sort\" component={Quick} />\n      <Route exact path=\"/algoviz/heap-sort\" component={Heap} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}